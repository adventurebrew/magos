[tool.poetry]
name = "magos"
version = "0.5.0"
description = "Tools for editing AGOS games (e.g. Simon the Sorcerer by AdventureSoft)"
authors = ["BLooperZ <blooperz@users.noreply.github.com>"]
license = "GPL-3.0-or-later"
readme = "README.md"
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Environment :: Console",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Intended Audience :: End Users/Desktop",
    "Operating System :: OS Independent",
    "Topic :: Games/Entertainment",
    "Topic :: Utilities",
]
keywords = ["agos", "simon", "sorcerer", "feeble", "adventure"]
repository = "https://github.com/adventurebrew/magos"

[tool.poetry.dependencies]
python = ">=3.12,<3.13"
numpy = "^1.26.0"
Pillow = "^10.0.1"
urwid = "^2.6.15"

[tool.poetry.group.dev.dependencies]
ruff = "^0.6.7"
mypy = "^1.11.2"
pre-commit = "^3.8.0"

[tool.poetry.group.release.dependencies]
pip-licenses = "^5.0.0"
pyinstaller = "^6.10.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
hypothesis = "^6.90.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff.format]
# Prefer single quotes over double quotes.
quote-style = "single"

[tool.mypy]
strict = true

[tool.ruff] # https://docs.astral.sh/ruff/settings/
target-version = "py310"
line-length = 88
fix = false
src = ["src", "tests"]

[tool.ruff.lint]
select = [ # https://docs.astral.sh/ruff/rules/
  "F", # Pyflakes
  "E", # pycodestyle
  "W", # pycodestyle
  "C90", # mccabe
  "I", # isort
  "N", # pep8-naming
  "D", # pydocstyle
  "UP", # pyupgrade
  "YTT", # flake8-2020
  "ANN", # flake8-annotations
  "ASYNC", # flake8-async
  "S", # flake8-bandit
  "BLE", # flake8-blind-except
  "FBT", # flake8-boolean-trap
  "B", # flake8-bugbear
  "A", # flake8-builtins
  "COM", # flake8-commas
  # "CPY", # flake8-copyright
  "C4", # flake8-comprehensions
  "DTZ", # flake8-datetimez
  "T10", # flake8-debugger
  # "DJ", # flake8-django
  # "EM", # flake8-errmsg
  "EXE", # flake8-executable
  "FA", # flake8-future-annotations
  "ISC", # flake8-implicit-str-concat
  "ICN", # flake8-import-conventions
  "LOG", # flake8-logging
  "G", # flake8-logging-format
  "INP", # flake8-no-pep420
  "PIE", # flake8-pie
  "T20", # flake8-print
  "PYI", # flake8-pyi
  "PT", # flake8-pytest-style
  "Q", # flake8-quotes
  "RSE", # flake8-raise
  "RET", # flake8-return
  "SLF", # flake8-self
  "SLOT", # flake8-slots
  "SIM", # flake8-simplify
  "TID", # flake8-tidy-imports
  "TCH", # flake8-type-checking
  "INT", # flake8-gettext
  "ARG", # flake8-unused-arguments
  "PTH", # flake8-use-pathlib
  # "TD", # flake8-todos
  # "FIX", # flake8-fixme
  "ERA", # eradicate
  # "PD", # pandas-vet
  "PGH", # pygrep-hooks
  "PL", # Pylint
  "PLC", # Convention
  "PLE", # Error
  "PLR", # Refactor
  "PLW", # Warning
  "TRY", # tryceratops
  "FLY", # flynt
  "NPY", # NumPy-specific rules
  # "FAST", # FastAPI
  # "AIR", # Airflow
  "PERF", # Perflint
  "FURB", # refurb
  # "DOC", # pydoclint
  "RUF", # Ruff-specific rules
]

fixable = ["I", "COM"]
unfixable = ["ERA001", "F401", "F841", "T201", "T203"]

ignore = [
  "RET504", # Allow assigning before return to ease debugging
  "S101", # Allow using assert
  "UP015", # Prefer explicitly configuring open mode
  "ANN101", "ANN102", # Do not require annotating self and cls
  "PTH103", # `os.mkdirs` is more readable
  "D107", # No need to docstring `__init__` method
  "D202", # No blank lines allowed after function docstring -> clashes with Black
  "ARG001", "ARG002", # Unused arguments are generally used for API compatibility
  "D", # TODO: Add docstrings
  "COM812", "ISC001", # Conflicts with formatter
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]
"tests/**/*.py" = ["D100"]
"src/magos/chiper.py" = ["RUF001"]

[tool.pytest.ini_options]
addopts = "--cov=magos --cov-report html"
